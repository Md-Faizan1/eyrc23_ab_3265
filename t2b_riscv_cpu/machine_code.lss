
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
0000009b l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000000dc g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
0000009b  w      .debug_info	00000000 .hidden t1b_path_planner.c.641dff40
00000000 g       *ABS*	00000000 __tbss_size
000000d4 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
0000011c g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000100 g     F .text	0000001c memset
00000054 g     F .text	00000080 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000120 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    12000593          	addi	x11,x0,288
  1c:	    00000613          	addi	x12,x0,0
  20:	    0bc000ef          	jal	x1,dc <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    0cc000ef          	jal	x1,100 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    094000ef          	jal	x1,d4 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 
     ### 
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const * argv[]) {
  54:	    f8010113          	addi	x2,x2,-128
     ### // path_planned[8]=8;
     ### // path_planned[9]=7;
     ###     int *ptr;
     ###     ptr=&path_planned[0];
     ###     *(ptr)=0;
     ###     *(ptr+1)=1;
  58:	    00100793          	addi	x15,x0,1
  5c:	    00f12223          	sw	x15,4(x2)
     ###     *(ptr+2)=2;
  60:	    00200793          	addi	x15,x0,2
  64:	    00f12423          	sw	x15,8(x2)
     ###     *(ptr+3)=3;
  68:	    00300793          	addi	x15,x0,3
  6c:	    00f12623          	sw	x15,12(x2)
     ###     *(ptr+4)=4;
  70:	    00400793          	addi	x15,x0,4
  74:	    00f12823          	sw	x15,16(x2)
     ###     *(ptr+5)=30;
  78:	    01e00793          	addi	x15,x0,30
  7c:	    00f12a23          	sw	x15,20(x2)
     ###     *(ptr+6)=6;
  80:	    00600793          	addi	x15,x0,6
  84:	    00f12c23          	sw	x15,24(x2)
     ###     *(ptr+7)=7;
  88:	    00700793          	addi	x15,x0,7
  8c:	    00f12e23          	sw	x15,28(x2)
     ###     *(ptr+8)=8;
  90:	    00800793          	addi	x15,x0,8
  94:	    02f12023          	sw	x15,32(x2)
     ###     *(ptr+9)=9;
  98:	    00900793          	addi	x15,x0,9
  9c:	    02f12223          	sw	x15,36(x2)
     ###     *(ptr)=0;
  a0:	    00012023          	sw	x0,0(x2)
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
  a4:	    00010793          	addi	x15,x2,0
  a8:	    02810693          	addi	x13,x2,40
     ###         NODE_POINT = path_planned[i];
  ac:	    02000737          	lui	x14,0x2000
  b0:	/-> 0007c603          	lbu	x12,0(x15)
     ###     for (int i = 0; i < idx; ++i) {
  b4:	|   00478793          	addi	x15,x15,4
     ###         NODE_POINT = path_planned[i];
  b8:	|   00c70423          	sb	x12,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
  bc:	\-- fed79ae3          	bne	x15,x13,b0 <t1b_path_planner.c.641dff40+0x15>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     
     ###   
     ###     CPU_DONE = 1;
  c0:	    00100793          	addi	x15,x0,1
  c4:	    00f70623          	sb	x15,12(x14)
     ###     _put_str("################################\n");
     ### 
     ### #endif
     ### 
     ###     return 0;
     ### }
  c8:	    00000513          	addi	x10,x0,0
  cc:	    08010113          	addi	x2,x2,128
  d0:	    00008067          	jalr	x0,0(x1)

000000d4 <_set_tls>:
  d4:	00050213          	addi	x4,x10,0
  d8:	00008067          	jalr	x0,0(x1)

000000dc <memcpy>:
  dc:	       00050313          	addi	x6,x10,0
  e0:	/----- 00060e63          	beq	x12,x0,fc <memcpy+0x20>
  e4:	|  /-> 00058383          	lb	x7,0(x11)
  e8:	|  |   00730023          	sb	x7,0(x6)
  ec:	|  |   fff60613          	addi	x12,x12,-1
  f0:	|  |   00130313          	addi	x6,x6,1
  f4:	|  |   00158593          	addi	x11,x11,1
  f8:	|  \-- fe0616e3          	bne	x12,x0,e4 <memcpy+0x8>
  fc:	\----> 00008067          	jalr	x0,0(x1)

00000100 <memset>:
 100:	       00050313          	addi	x6,x10,0
 104:	/----- 00060a63          	beq	x12,x0,118 <memset+0x18>
 108:	|  /-> 00b30023          	sb	x11,0(x6)
 10c:	|  |   fff60613          	addi	x12,x12,-1
 110:	|  |   00130313          	addi	x6,x6,1
 114:	|  \-- fe061ae3          	bne	x12,x0,108 <memset+0x8>
 118:	\----> 00008067          	jalr	x0,0(x1)

0000011c <__text_end>:
 11c:	0000                	c.unimp
	...
