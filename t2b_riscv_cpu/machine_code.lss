
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
000003d4 l     F .text	00000038 add_edge
0000040c l     F .text	0000006c findShortestPath
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000642 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000642  w      .debug_info	00000000 .hidden t1b_path_plannerm.c.604d4bfd
00000480 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000478 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000004c0 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000004a4 g     F .text	0000001c memset
00000054 g     F .text	00000380 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000004c0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    4c000593          	addi	x11,x0,1216
  1c:	    00000613          	addi	x12,x0,0
  20:	    460000ef          	jal	x1,480 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    470000ef          	jal	x1,4a4 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    438000ef          	jal	x1,478 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 
     ### 
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const * argv[]) {
  54:	             e6010113          	addi	x2,x2,-416
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 0;
     ### 
     ###     // ############# Add your code here #############
     ### 
     ###     int graph [VERTICES] = {0};
  58:	             07800613          	addi	x12,x0,120
  5c:	             00000593          	addi	x11,x0,0
  60:	             02810513          	addi	x10,x2,40
     ### int main(int argc, char const * argv[]) {
  64:	             18112e23          	sw	x1,412(x2)
  68:	             18812c23          	sw	x8,408(x2)
  6c:	             18912a23          	sw	x9,404(x2)
     ###     uint8_t idx = 0;
  70:	             000103a3          	sb	x0,7(x2)
     ###     int graph [VERTICES] = {0};
  74:	             430000ef          	jal	x1,4a4 <memset>
     ### 
     ###     // Add edges to the adjacency matrix
     ###     add_edge(graph, 0, 1);
  78:	             00100613          	addi	x12,x0,1
  7c:	             00000593          	addi	x11,x0,0
  80:	             02810513          	addi	x10,x2,40
  84:	             350000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 1, 2);
  88:	             00200613          	addi	x12,x0,2
  8c:	             00100593          	addi	x11,x0,1
  90:	             02810513          	addi	x10,x2,40
  94:	             340000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 1, 29);
  98:	             01d00613          	addi	x12,x0,29
  9c:	             00100593          	addi	x11,x0,1
  a0:	             02810513          	addi	x10,x2,40
  a4:	             330000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 2, 3);
  a8:	             00300613          	addi	x12,x0,3
  ac:	             00200593          	addi	x11,x0,2
  b0:	             02810513          	addi	x10,x2,40
  b4:	             320000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 2, 8);
  b8:	             00800613          	addi	x12,x0,8
  bc:	             00200593          	addi	x11,x0,2
  c0:	             02810513          	addi	x10,x2,40
  c4:	             310000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 3, 4);
  c8:	             00400613          	addi	x12,x0,4
  cc:	             00300593          	addi	x11,x0,3
  d0:	             02810513          	addi	x10,x2,40
  d4:	             300000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 3, 28);
  d8:	             01c00613          	addi	x12,x0,28
  dc:	             00300593          	addi	x11,x0,3
  e0:	             02810513          	addi	x10,x2,40
  e4:	             2f0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 4, 5);
  e8:	             00500613          	addi	x12,x0,5
  ec:	             00400593          	addi	x11,x0,4
  f0:	             02810513          	addi	x10,x2,40
  f4:	             2e0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 4, 6);
  f8:	             00600613          	addi	x12,x0,6
  fc:	             00400593          	addi	x11,x0,4
 100:	             02810513          	addi	x10,x2,40
 104:	             2d0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 6, 7);
 108:	             00700613          	addi	x12,x0,7
 10c:	             00600593          	addi	x11,x0,6
 110:	             02810513          	addi	x10,x2,40
 114:	             2c0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 7, 8);
 118:	             00800613          	addi	x12,x0,8
 11c:	             00700593          	addi	x11,x0,7
 120:	             02810513          	addi	x10,x2,40
 124:	             2b0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 8, 9);
 128:	             00900613          	addi	x12,x0,9
 12c:	             00800593          	addi	x11,x0,8
 130:	             02810513          	addi	x10,x2,40
 134:	             2a0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 8, 12);
 138:	             00c00613          	addi	x12,x0,12
 13c:	             00800593          	addi	x11,x0,8
 140:	             02810513          	addi	x10,x2,40
 144:	             290000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 9, 10);
 148:	             00a00613          	addi	x12,x0,10
 14c:	             00900593          	addi	x11,x0,9
 150:	             02810513          	addi	x10,x2,40
 154:	             280000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 9, 11);
 158:	             00b00613          	addi	x12,x0,11
 15c:	             00900593          	addi	x11,x0,9
 160:	             02810513          	addi	x10,x2,40
 164:	             270000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 12, 13);
 168:	             00d00613          	addi	x12,x0,13
 16c:	             00c00593          	addi	x11,x0,12
 170:	             02810513          	addi	x10,x2,40
 174:	             260000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 12, 19);
 178:	             01300613          	addi	x12,x0,19
 17c:	             00c00593          	addi	x11,x0,12
 180:	             02810513          	addi	x10,x2,40
 184:	             250000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 13, 14);
 188:	             00e00613          	addi	x12,x0,14
 18c:	             00d00593          	addi	x11,x0,13
 190:	             02810513          	addi	x10,x2,40
 194:	             240000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 14, 15);
 198:	             00f00613          	addi	x12,x0,15
 19c:	             00e00593          	addi	x11,x0,14
 1a0:	             02810513          	addi	x10,x2,40
 1a4:	             230000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 14, 16);
 1a8:	             01000613          	addi	x12,x0,16
 1ac:	             00e00593          	addi	x11,x0,14
 1b0:	             02810513          	addi	x10,x2,40
 1b4:	             220000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 16, 17);
 1b8:	             01100613          	addi	x12,x0,17
 1bc:	             01000593          	addi	x11,x0,16
 1c0:	             02810513          	addi	x10,x2,40
 1c4:	             210000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 16, 18);
 1c8:	             01200613          	addi	x12,x0,18
 1cc:	             01000593          	addi	x11,x0,16
 1d0:	             02810513          	addi	x10,x2,40
 1d4:	             200000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 18, 19);
 1d8:	             01300613          	addi	x12,x0,19
 1dc:	             01200593          	addi	x11,x0,18
 1e0:	             02810513          	addi	x10,x2,40
 1e4:	             1f0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 19, 20);
 1e8:	             01400613          	addi	x12,x0,20
 1ec:	             01300593          	addi	x11,x0,19
 1f0:	             02810513          	addi	x10,x2,40
 1f4:	             1e0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 20, 21);
 1f8:	             01500613          	addi	x12,x0,21
 1fc:	             01400593          	addi	x11,x0,20
 200:	             02810513          	addi	x10,x2,40
 204:	             1d0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 20, 24);
 208:	             01800613          	addi	x12,x0,24
 20c:	             01400593          	addi	x11,x0,20
 210:	             02810513          	addi	x10,x2,40
 214:	             1c0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 20, 29);
 218:	             01d00613          	addi	x12,x0,29
 21c:	             01400593          	addi	x11,x0,20
 220:	             02810513          	addi	x10,x2,40
 224:	             1b0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 21, 22);
 228:	             01600613          	addi	x12,x0,22
 22c:	             01500593          	addi	x11,x0,21
 230:	             02810513          	addi	x10,x2,40
 234:	             1a0000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 21, 23);
 238:	             01700613          	addi	x12,x0,23
 23c:	             01500593          	addi	x11,x0,21
 240:	             02810513          	addi	x10,x2,40
 244:	             190000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 24, 25);
 248:	             01900613          	addi	x12,x0,25
 24c:	             01800593          	addi	x11,x0,24
 250:	             02810513          	addi	x10,x2,40
 254:	             180000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 25, 26);
 258:	             01a00613          	addi	x12,x0,26
 25c:	             01900593          	addi	x11,x0,25
 260:	             02810513          	addi	x10,x2,40
 264:	             170000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 26, 27);
 268:	             01b00613          	addi	x12,x0,27
 26c:	             01a00593          	addi	x11,x0,26
 270:	             02810513          	addi	x10,x2,40
 274:	             160000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 26, 28);
 278:	             01c00613          	addi	x12,x0,28
 27c:	             01a00593          	addi	x11,x0,26
 280:	             02810513          	addi	x10,x2,40
 284:	             150000ef          	jal	x1,3d4 <add_edge>
     ###     add_edge(graph, 28, 29);
 288:	             01d00613          	addi	x12,x0,29
 28c:	             01c00593          	addi	x11,x0,28
 290:	             02810513          	addi	x10,x2,40
 294:	             140000ef          	jal	x1,3d4 <add_edge>
     ### 
     ###     // _put_str("######### Chk 1 #########\n");
     ### 
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 298:	             020007b7          	lui	x15,0x2000
 29c:	             0007c403          	lbu	x8,0(x15) # 2000000 <__bss_end>
 2a0:	             0047c483          	lbu	x9,4(x15)
     ###         dist[i] = 1e9;
 2a4:	             3b9ad6b7          	lui	x13,0x3b9ad
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 2a8:	             0ff47413          	andi	x8,x8,255
 2ac:	             0ff4f493          	andi	x9,x9,255
     ###     for (int i = 0; i < VERTICES; i++) {
 2b0:	             11810713          	addi	x14,x2,280
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 2b4:	             0a010793          	addi	x15,x2,160
     ###         dist[i] = 1e9;
 2b8:	             a0068693          	addi	x13,x13,-1536 # 3b9aca00 <__global_pointer$+0x399ac200>
 2bc:	         /-> 00d7a023          	sw	x13,0(x15)
     ###     for (int i = 0; i < VERTICES; i++) {
 2c0:	         |   00478793          	addi	x15,x15,4
 2c4:	         \-- fee79ce3          	bne	x15,x14,2bc <__ram_size+0x1bc>
     ###         parent[i] = -1;
 2c8:	             00070513          	addi	x10,x14,0
 2cc:	             07800613          	addi	x12,x0,120
 2d0:	             0ff00593          	addi	x11,x0,255
 2d4:	             1d0000ef          	jal	x1,4a4 <memset>
     ###     dist[start] = 0;
 2d8:	             00241413          	slli	x8,x8,0x2
 2dc:	             19010793          	addi	x15,x2,400
 2e0:	             00878433          	add	x8,x15,x8
     ###                 if (((bool)(graph[i] & (1 << j))) != 0 && dist[i] != 1e9 && dist[i] + ((bool)(graph[i] & (1 << j))) < dist[j]) {
 2e4:	             3b9ade37          	lui	x28,0x3b9ad
     ###         parent[i] = -1;
 2e8:	             00050713          	addi	x14,x10,0
     ###     dist[start] = 0;
 2ec:	             f0042823          	sw	x0,-240(x8)
 2f0:	             01d00313          	addi	x6,x0,29
     ###                 if (((bool)(graph[i] & (1 << j))) != 0 && dist[i] != 1e9 && dist[i] + ((bool)(graph[i] & (1 << j))) < dist[j]) {
 2f4:	             a00e0e13          	addi	x28,x28,-1536 # 3b9aca00 <__global_pointer$+0x399ac200>
     ###             for (int j = 0; j < VERTICES; ++j) {
 2f8:	             01e00f13          	addi	x30,x0,30
     ###         for (int i = 0; i < VERTICES; ++i) {
 2fc:	/----------> 02810893          	addi	x17,x2,40
     ###             for (int j = 0; j < VERTICES; ++j) {
 300:	|            0a010593          	addi	x11,x2,160
     ###         for (int i = 0; i < VERTICES; ++i) {
 304:	|            00000693          	addi	x13,x0,0
 308:	|     /----- 04c0006f          	jal	x0,354 <__ram_size+0x254>
     ###                 if (((bool)(graph[i] & (1 << j))) != 0 && dist[i] != 1e9 && dist[i] + ((bool)(graph[i] & (1 << j))) < dist[j]) {
 30c:	|  /--|----> 40ffd833          	sra	x16,x31,x15
 310:	|  |  |      00187513          	andi	x10,x16,1
 314:	|  |  |  /-- 02050063          	beq	x10,x0,334 <__ram_size+0x234>
 318:	|  |  |  |   0005a803          	lw	x16,0(x11)
 31c:	|  |  |  +-- 01c80c63          	beq	x16,x28,334 <__ram_size+0x234>
 320:	|  |  |  |   01050533          	add	x10,x10,x16
 324:	|  |  |  |   00062803          	lw	x16,0(x12)
 328:	|  |  |  +-- 01055663          	bge	x10,x16,334 <__ram_size+0x234>
     ###                     dist[j] = dist[i] + ((bool)(graph[i] & (1 << j)));
 32c:	|  |  |  |   00a62023          	sw	x10,0(x12)
     ###                     parent[j] = i;
 330:	|  |  |  |   00dea023          	sw	x13,0(x29)
     ###             for (int j = 0; j < VERTICES; ++j) {
 334:	|  |  |  \-> 00178793          	addi	x15,x15,1
 338:	|  |  |      00460613          	addi	x12,x12,4
 33c:	|  |  |      004e8e93          	addi	x29,x29,4
 340:	|  +--|----- fde796e3          	bne	x15,x30,30c <__ram_size+0x20c>
     ###         for (int i = 0; i < VERTICES; ++i) {
 344:	|  |  |      00168693          	addi	x13,x13,1
 348:	|  |  |      00488893          	addi	x17,x17,4
 34c:	|  |  |      00458593          	addi	x11,x11,4
 350:	|  |  |  /-- 00f68c63          	beq	x13,x15,368 <__ram_size+0x268>
     ###                 if (((bool)(graph[i] & (1 << j))) != 0 && dist[i] != 1e9 && dist[i] + ((bool)(graph[i] & (1 << j))) < dist[j]) {
 354:	|  |  \--|-> 0008af83          	lw	x31,0(x17)
 358:	|  |     |   00070e93          	addi	x29,x14,0
 35c:	|  |     |   0a010613          	addi	x12,x2,160
     ###             for (int j = 0; j < VERTICES; ++j) {
 360:	|  |     |   00000793          	addi	x15,x0,0
 364:	|  \-----|-- fa9ff06f          	jal	x0,30c <__ram_size+0x20c>
     ###     for (int k = 0; k < VERTICES - 1; ++k) {
 368:	|        \-> fff30313          	addi	x6,x6,-1
 36c:	\----------- f80318e3          	bne	x6,x0,2fc <__ram_size+0x1fc>
     ###     findShortestPath(parent, end, path_planned, idx);
 370:	             00710693          	addi	x13,x2,7
 374:	             00810613          	addi	x12,x2,8
 378:	             00048593          	addi	x11,x9,0
 37c:	             00070513          	addi	x10,x14,0
     ###     (*idx) = 0; // Initialize the path length
 380:	             000103a3          	sb	x0,7(x2)
     ###     findShortestPath(parent, end, path_planned, idx);
 384:	             088000ef          	jal	x1,40c <findShortestPath>
     ###     // _put_str("######### Chk last #########\n");
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 388:	             00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 38c:	             020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 390:	      /----> 00714703          	lbu	x14,7(x2)
 394:	      |  /-- 02e7c463          	blt	x15,x14,3bc <__ram_size+0x2bc>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 398:	      |  |   020007b7          	lui	x15,0x2000
 39c:	      |  |   00100713          	addi	x14,x0,1
 3a0:	      |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###     _put_str("################################\n");
     ### 
     ### #endif
     ### 
     ###     return 0;
     ### }
 3a4:	      |  |   19c12083          	lw	x1,412(x2)
 3a8:	      |  |   19812403          	lw	x8,408(x2)
 3ac:	      |  |   19412483          	lw	x9,404(x2)
 3b0:	      |  |   00000513          	addi	x10,x0,0
 3b4:	      |  |   1a010113          	addi	x2,x2,416
 3b8:	      |  |   00008067          	jalr	x0,0(x1)
     ###         NODE_POINT = path_planned[i];
 3bc:	      |  \-> 00810713          	addi	x14,x2,8
 3c0:	      |      00f70733          	add	x14,x14,x15
 3c4:	      |      00074703          	lbu	x14,0(x14)
     ###     for (int i = 0; i < idx; ++i) {
 3c8:	      |      00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 3cc:	      |      00e68423          	sb	x14,8(x13) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 3d0:	      \----- fc1ff06f          	jal	x0,390 <__ram_size+0x290>

000003d4 <add_edge>:
     ###     graph[u] |= (1 << v);
 3d4:	00259713          	slli	x14,x11,0x2
 3d8:	00e50733          	add	x14,x10,x14
 3dc:	00072683          	lw	x13,0(x14)
 3e0:	00100793          	addi	x15,x0,1
 3e4:	00c79833          	sll	x16,x15,x12
 3e8:	0106e6b3          	or	x13,x13,x16
     ###     graph[v] |= (1 << u);
 3ec:	00261613          	slli	x12,x12,0x2
     ###     graph[u] |= (1 << v);
 3f0:	00d72023          	sw	x13,0(x14)
     ###     graph[v] |= (1 << u);
 3f4:	00c50533          	add	x10,x10,x12
 3f8:	00b797b3          	sll	x15,x15,x11
 3fc:	00052583          	lw	x11,0(x10)
 400:	00f5e7b3          	or	x15,x11,x15
 404:	00f52023          	sw	x15,0(x10)
     ### }
 408:	00008067          	jalr	x0,0(x1)

0000040c <findShortestPath>:
     ###     if (parent[end] == -1) {
 40c:	/-------> 00259793          	slli	x15,x11,0x2
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 410:	|         ff010113          	addi	x2,x2,-16
     ###     if (parent[end] == -1) {
 414:	|         00f507b3          	add	x15,x10,x15
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 418:	|         00912223          	sw	x9,4(x2)
 41c:	|         00058493          	addi	x9,x11,0
     ###     if (parent[end] == -1) {
 420:	|         0007a583          	lw	x11,0(x15)
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 424:	|         00812423          	sw	x8,8(x2)
 428:	|         01212023          	sw	x18,0(x2)
 42c:	|         00112623          	sw	x1,12(x2)
     ###     if (parent[end] == -1) {
 430:	|         fff00793          	addi	x15,x0,-1
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 434:	|         00060413          	addi	x8,x12,0
 438:	|         00068913          	addi	x18,x13,0
     ###         path_planned[(*idx)++] = end;
 43c:	|         0ff4f493          	andi	x9,x9,255
     ###     if (parent[end] == -1) {
 440:	|     /-- 02f59863          	bne	x11,x15,470 <findShortestPath+0x64>
     ###     path_planned[(*idx)++] = end;
 444:	|  /--|-> 00094603          	lbu	x12,0(x18)
 448:	|  |  |   00160793          	addi	x15,x12,1
 44c:	|  |  |   00f90023          	sb	x15,0(x18)
 450:	|  |  |   00c40433          	add	x8,x8,x12
 454:	|  |  |   00940023          	sb	x9,0(x8)
     ### }
 458:	|  |  |   00c12083          	lw	x1,12(x2)
 45c:	|  |  |   00812403          	lw	x8,8(x2)
 460:	|  |  |   00412483          	lw	x9,4(x2)
 464:	|  |  |   00012903          	lw	x18,0(x2)
 468:	|  |  |   01010113          	addi	x2,x2,16
 46c:	|  |  |   00008067          	jalr	x0,0(x1)
     ###     findShortestPath(parent, parent[end], path_planned, idx);
 470:	\--|--\-X f9dff0ef          	jal	x1,40c <findShortestPath>
 474:	   \----- fd1ff06f          	jal	x0,444 <findShortestPath+0x38>

00000478 <_set_tls>:
 478:	00050213          	addi	x4,x10,0
 47c:	00008067          	jalr	x0,0(x1)

00000480 <memcpy>:
 480:	       00050313          	addi	x6,x10,0
 484:	/----- 00060e63          	beq	x12,x0,4a0 <memcpy+0x20>
 488:	|  /-> 00058383          	lb	x7,0(x11)
 48c:	|  |   00730023          	sb	x7,0(x6)
 490:	|  |   fff60613          	addi	x12,x12,-1
 494:	|  |   00130313          	addi	x6,x6,1
 498:	|  |   00158593          	addi	x11,x11,1
 49c:	|  \-- fe0616e3          	bne	x12,x0,488 <memcpy+0x8>
 4a0:	\----> 00008067          	jalr	x0,0(x1)

000004a4 <memset>:
 4a4:	       00050313          	addi	x6,x10,0
 4a8:	/----- 00060a63          	beq	x12,x0,4bc <memset+0x18>
 4ac:	|  /-> 00b30023          	sb	x11,0(x6)
 4b0:	|  |   fff60613          	addi	x12,x12,-1
 4b4:	|  |   00130313          	addi	x6,x6,1
 4b8:	|  \-- fe061ae3          	bne	x12,x0,4ac <memset+0x8>
 4bc:	\----> 00008067          	jalr	x0,0(x1)
