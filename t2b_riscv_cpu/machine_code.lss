
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
00000330 l     F .text	0000006c findShortestPath
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
0000026d l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000003a4 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
0000039c g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000003e4 g       .text	00000000 __text_end
0000026d  w      .debug_info	00000000 .hidden t1b_path_planner4.c.f6debb5c
02000000 g       .bss	00000000 __bss_start
000003c8 g     F .text	0000001c memset
00000054 g     F .text	000002dc main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000003e8 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    3e800593          	addi	x11,x0,1000
  1c:	    00000613          	addi	x12,x0,0
  20:	    384000ef          	jal	x1,3a4 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    394000ef          	jal	x1,3c8 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    35c000ef          	jal	x1,39c <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 
     ### 
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	          b2010113          	addi	x2,x2,-1248
     ### // int *graph=(int*)malloc(900*sizeof(bool));
     ### 
     ### // graph=(int*)address;
     ### 
     ### 
     ### bool graph[VERTICES][VERTICES] = {
  58:	          38400613          	addi	x12,x0,900
  5c:	          00000593          	addi	x11,x0,0
  60:	          13c10513          	addi	x10,x2,316
     ### int main(int argc, char const *argv[]) {
  64:	          4c812c23          	sw	x8,1240(x2)
  68:	          4d212823          	sw	x18,1232(x2)
  6c:	          4d312623          	sw	x19,1228(x2)
  70:	          4c112e23          	sw	x1,1244(x2)
  74:	          4c912a23          	sw	x9,1236(x2)
     ###     uint8_t idx = 0;
  78:	          000105a3          	sb	x0,11(x2)
     ### bool graph[VERTICES][VERTICES] = {
  7c:	          34c000ef          	jal	x1,3c8 <memset>
  80:	          00100793          	addi	x15,x0,1
  84:	          12f10ea3          	sb	x15,317(x2)
  88:	          14f10d23          	sb	x15,346(x2)
  8c:	          14f10e23          	sb	x15,348(x2)
  90:	          16f10ba3          	sb	x15,375(x2)
  94:	          16f10ca3          	sb	x15,377(x2)
  98:	          16f10da3          	sb	x15,379(x2)
  9c:	          18f10023          	sb	x15,384(x2)
  a0:	          18f10c23          	sb	x15,408(x2)
  a4:	          18f10d23          	sb	x15,410(x2)
  a8:	          1af10923          	sb	x15,434(x2)
  ac:	          1af10ba3          	sb	x15,439(x2)
  b0:	          1af10ca3          	sb	x15,441(x2)
  b4:	          1af10d23          	sb	x15,442(x2)
  b8:	          1cf10b23          	sb	x15,470(x2)
  bc:	          1ef10a23          	sb	x15,500(x2)
  c0:	          1ef10ba3          	sb	x15,503(x2)
  c4:	          20f10a23          	sb	x15,532(x2)
  c8:	          20f10b23          	sb	x15,534(x2)
  cc:	          22f10723          	sb	x15,558(x2)
  d0:	          22f109a3          	sb	x15,563(x2)
  d4:	          22f10aa3          	sb	x15,565(x2)
  d8:	          22f10c23          	sb	x15,568(x2)
  dc:	          24f10923          	sb	x15,594(x2)
  e0:	          24f10a23          	sb	x15,596(x2)
  e4:	          24f10aa3          	sb	x15,597(x2)
  e8:	          26f108a3          	sb	x15,625(x2)
  ec:	          28f107a3          	sb	x15,655(x2)
  f0:	          2af10623          	sb	x15,684(x2)
  f4:	          2af108a3          	sb	x15,689(x2)
  f8:	          2af10ba3          	sb	x15,695(x2)
  fc:	          2cf10723          	sb	x15,718(x2)
 100:	          2cf10823          	sb	x15,720(x2)
 104:	          2ef106a3          	sb	x15,749(x2)
 108:	          2ef107a3          	sb	x15,751(x2)
 10c:	          2ef10823          	sb	x15,752(x2)
 110:	          30f10623          	sb	x15,780(x2)
 114:	          32f10523          	sb	x15,810(x2)
 118:	          32f106a3          	sb	x15,813(x2)
 11c:	          32f10723          	sb	x15,814(x2)
 120:	          34f10523          	sb	x15,842(x2)
 124:	          36f10423          	sb	x15,872(x2)
 128:	          36f105a3          	sb	x15,875(x2)
 12c:	          38f10123          	sb	x15,898(x2)
 130:	          38f10423          	sb	x15,904(x2)
 134:	          38f10523          	sb	x15,906(x2)
 138:	          3af103a3          	sb	x15,935(x2)
 13c:	          3af104a3          	sb	x15,937(x2)
 140:	          3af10623          	sb	x15,940(x2)
 144:	          3af108a3          	sb	x15,945(x2)
 148:	          3cf10323          	sb	x15,966(x2)
 14c:	          3cf10423          	sb	x15,968(x2)
 150:	          3cf104a3          	sb	x15,969(x2)
 154:	          3ef102a3          	sb	x15,997(x2)
 158:	          40f101a3          	sb	x15,1027(x2)
 15c:	          42f10023          	sb	x15,1056(x2)
 160:	          42f102a3          	sb	x15,1061(x2)
 164:	          44f10123          	sb	x15,1090(x2)
 168:	          44f10223          	sb	x15,1092(x2)
 16c:	          46f100a3          	sb	x15,1121(x2)
 170:	          46f101a3          	sb	x15,1123(x2)
 174:	          46f10223          	sb	x15,1124(x2)
 178:	          48f10023          	sb	x15,1152(x2)
 17c:	          48f103a3          	sb	x15,1159(x2)
 180:	          48f10f23          	sb	x15,1182(x2)
 184:	          4af100a3          	sb	x15,1185(x2)
 188:	          4af101a3          	sb	x15,1187(x2)
 18c:	          4af10b23          	sb	x15,1206(x2)
 190:	          4af10f23          	sb	x15,1214(x2)
     ###         {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
     ###         {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
     ### 
     ###     };
     ### 
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 194:	          020007b7          	lui	x15,0x2000
 198:	          0007c403          	lbu	x8,0(x15) # 2000000 <__bss_end>
 19c:	          0047c983          	lbu	x19,4(x15)
     ###         dist[i] = INT_MAX;
 1a0:	          80000737          	lui	x14,0x80000
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 1a4:	          0ff47413          	andi	x8,x8,255
 1a8:	          0ff9f993          	andi	x19,x19,255
 1ac:	          0c410913          	addi	x18,x2,196
 1b0:	          04c10793          	addi	x15,x2,76
     ###         dist[i] = INT_MAX;
 1b4:	          fff74713          	xori	x14,x14,-1
 1b8:	      /-> 00e7a023          	sw	x14,0(x15)
     ###     for (int i = 0; i < VERTICES; i++) {
 1bc:	      |   00478793          	addi	x15,x15,4
 1c0:	      \-- ff279ce3          	bne	x15,x18,1b8 <__ram_size+0xb8>
     ###         visited[i] = false;
 1c4:	          01e00613          	addi	x12,x0,30
 1c8:	          00000593          	addi	x11,x0,0
 1cc:	          00c10513          	addi	x10,x2,12
 1d0:	          1f8000ef          	jal	x1,3c8 <memset>
     ###         parent[i] = -1;
 1d4:	          07800613          	addi	x12,x0,120
 1d8:	          0ff00593          	addi	x11,x0,255
 1dc:	          00090513          	addi	x10,x18,0
 1e0:	          1e8000ef          	jal	x1,3c8 <memset>
     ###     dist[start] = 0;
 1e4:	          00241413          	slli	x8,x8,0x2
 1e8:	          4c010793          	addi	x15,x2,1216
 1ec:	          00878433          	add	x8,x15,x8
     ###     int min = INT_MAX, min_index;
 1f0:	          80000637          	lui	x12,0x80000
     ###     dist[start] = 0;
 1f4:	          b8042623          	sw	x0,-1140(x8)
 1f8:	          01d00593          	addi	x11,x0,29
     ###     int min = INT_MAX, min_index;
 1fc:	          fff64613          	xori	x12,x12,-1
     ###     for (int v = 0; v < VERTICES; v++) {
 200:	          01e00313          	addi	x6,x0,30
     ###         visited[u] = true;
 204:	          00100e13          	addi	x28,x0,1
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx);
 208:	/-------> 04c10713          	addi	x14,x2,76
     ###     int min = INT_MAX, min_index;
 20c:	|         00060693          	addi	x13,x12,0 # 80000000 <__global_pointer$+0x7dfff800>
     ###     for (int v = 0; v < VERTICES; v++) {
 210:	|         00000793          	addi	x15,x0,0
     ###         if (!visited[v] && dist[v] < min) {
 214:	|  /----> 00c10513          	addi	x10,x2,12
 218:	|  |      00f50533          	add	x10,x10,x15
 21c:	|  |      00054503          	lbu	x10,0(x10)
 220:	|  |  /-- 00051a63          	bne	x10,x0,234 <__ram_size+0x134>
 224:	|  |  |   00072503          	lw	x10,0(x14) # 80000000 <__global_pointer$+0x7dfff800>
 228:	|  |  +-- 00d55663          	bge	x10,x13,234 <__ram_size+0x134>
 22c:	|  |  |   00078493          	addi	x9,x15,0
 230:	|  |  |   00050693          	addi	x13,x10,0
     ###     for (int v = 0; v < VERTICES; v++) {
 234:	|  |  \-> 00178793          	addi	x15,x15,1
 238:	|  |      00470713          	addi	x14,x14,4
 23c:	|  \----- fc679ce3          	bne	x15,x6,214 <__ram_size+0x114>
     ###         visited[u] = true;
 240:	|         4c010793          	addi	x15,x2,1216
     ###             if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
 244:	|         00449713          	slli	x14,x9,0x4
     ###         visited[u] = true;
 248:	|         009787b3          	add	x15,x15,x9
     ###             if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
 24c:	|         40970733          	sub	x14,x14,x9
 250:	|         00249893          	slli	x17,x9,0x2
 254:	|         4c010693          	addi	x13,x2,1216
     ###         visited[u] = true;
 258:	|         b5c78623          	sb	x28,-1204(x15)
     ###             if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
 25c:	|         00171713          	slli	x14,x14,0x1
 260:	|         00090813          	addi	x16,x18,0
 264:	|         04c10513          	addi	x10,x2,76
     ###         for (int v = 0; v < VERTICES; v++) {
 268:	|         00000793          	addi	x15,x0,0
     ###             if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
 26c:	|         011688b3          	add	x17,x13,x17
 270:	|  /----> 00c10693          	addi	x13,x2,12
 274:	|  |      00f686b3          	add	x13,x13,x15
 278:	|  |      0006c683          	lbu	x13,0(x13)
 27c:	|  |  /-- 02069a63          	bne	x13,x0,2b0 <t1b_path_planner4.c.f6debb5c+0x43>
 280:	|  |  |   00f706b3          	add	x13,x14,x15
 284:	|  |  |   13c10e93          	addi	x29,x2,316
 288:	|  |  |   00de86b3          	add	x13,x29,x13
 28c:	|  |  |   0006c683          	lbu	x13,0(x13)
 290:	|  |  +-- 02068063          	beq	x13,x0,2b0 <t1b_path_planner4.c.f6debb5c+0x43>
 294:	|  |  |   b8c8a683          	lw	x13,-1140(x17)
 298:	|  |  +-- 00c68c63          	beq	x13,x12,2b0 <t1b_path_planner4.c.f6debb5c+0x43>
 29c:	|  |  |   00052e83          	lw	x29,0(x10)
 2a0:	|  |  |   00168693          	addi	x13,x13,1
 2a4:	|  |  +-- 01d6d663          	bge	x13,x29,2b0 <t1b_path_planner4.c.f6debb5c+0x43>
     ###                 dist[v] = dist[u] + graph[u][v];
 2a8:	|  |  |   00d52023          	sw	x13,0(x10)
     ###                 parent[v] = u;
 2ac:	|  |  |   00982023          	sw	x9,0(x16)
     ###         for (int v = 0; v < VERTICES; v++) {
 2b0:	|  |  \-> 00178793          	addi	x15,x15,1
 2b4:	|  |      00450513          	addi	x10,x10,4
 2b8:	|  |      00480813          	addi	x16,x16,4
 2bc:	|  \----- fa679ae3          	bne	x15,x6,270 <t1b_path_planner4.c.f6debb5c+0x3>
     ###     for (int count = 0; count < VERTICES - 1; count++) {
 2c0:	|         fff58593          	addi	x11,x11,-1
 2c4:	\-------- f40592e3          	bne	x11,x0,208 <__ram_size+0x108>
     ###     findShortestPath(parent, end, path_planned, idx);
 2c8:	          00b10693          	addi	x13,x2,11
 2cc:	          02c10613          	addi	x12,x2,44
 2d0:	          00098593          	addi	x11,x19,0
 2d4:	          00090513          	addi	x10,x18,0
 2d8:	          058000ef          	jal	x1,330 <findShortestPath>
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 2dc:	          00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 2e0:	          020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 2e4:	   /----> 00b14703          	lbu	x14,11(x2)
 2e8:	   |  /-- 02e7c863          	blt	x15,x14,318 <t1b_path_planner4.c.f6debb5c+0xab>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 2ec:	   |  |   020007b7          	lui	x15,0x2000
 2f0:	   |  |   00100713          	addi	x14,x0,1
 2f4:	   |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 2f8:	   |  |   4dc12083          	lw	x1,1244(x2)
 2fc:	   |  |   4d812403          	lw	x8,1240(x2)
 300:	   |  |   4d412483          	lw	x9,1236(x2)
 304:	   |  |   4d012903          	lw	x18,1232(x2)
 308:	   |  |   4cc12983          	lw	x19,1228(x2)
 30c:	   |  |   00000513          	addi	x10,x0,0
 310:	   |  |   4e010113          	addi	x2,x2,1248
 314:	   |  |   00008067          	jalr	x0,0(x1)
     ###         NODE_POINT = path_planned[i];
 318:	   |  \-> 02c10713          	addi	x14,x2,44
 31c:	   |      00f70733          	add	x14,x14,x15
 320:	   |      00074703          	lbu	x14,0(x14)
     ###     for (int i = 0; i < idx; ++i) {
 324:	   |      00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 328:	   |      00e68423          	sb	x14,8(x13) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 32c:	   \----- fb9ff06f          	jal	x0,2e4 <t1b_path_planner4.c.f6debb5c+0x77>

00000330 <findShortestPath>:
     ###     if (parent[end] == -1) {
 330:	/-------> 00259793          	slli	x15,x11,0x2
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 334:	|         ff010113          	addi	x2,x2,-16
     ###     if (parent[end] == -1) {
 338:	|         00f507b3          	add	x15,x10,x15
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 33c:	|         00912223          	sw	x9,4(x2)
 340:	|         00058493          	addi	x9,x11,0
     ###     if (parent[end] == -1) {
 344:	|         0007a583          	lw	x11,0(x15)
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 348:	|         00812423          	sw	x8,8(x2)
 34c:	|         01212023          	sw	x18,0(x2)
 350:	|         00112623          	sw	x1,12(x2)
     ###     if (parent[end] == -1) {
 354:	|         fff00793          	addi	x15,x0,-1
     ### void findShortestPath(int parent[], int end, uint8_t path_planned[], uint8_t* idx) {
 358:	|         00060413          	addi	x8,x12,0
 35c:	|         00068913          	addi	x18,x13,0
     ###         path_planned[(*idx)++] = end;
 360:	|         0ff4f493          	andi	x9,x9,255
     ###     if (parent[end] == -1) {
 364:	|     /-- 02f59863          	bne	x11,x15,394 <findShortestPath+0x64>
     ###     path_planned[(*idx)++] = end;
 368:	|  /--|-> 00094603          	lbu	x12,0(x18)
 36c:	|  |  |   00160793          	addi	x15,x12,1
 370:	|  |  |   00f90023          	sb	x15,0(x18)
 374:	|  |  |   00c40433          	add	x8,x8,x12
 378:	|  |  |   00940023          	sb	x9,0(x8)
     ### }
 37c:	|  |  |   00c12083          	lw	x1,12(x2)
 380:	|  |  |   00812403          	lw	x8,8(x2)
 384:	|  |  |   00412483          	lw	x9,4(x2)
 388:	|  |  |   00012903          	lw	x18,0(x2)
 38c:	|  |  |   01010113          	addi	x2,x2,16
 390:	|  |  |   00008067          	jalr	x0,0(x1)
     ###     findShortestPath(parent, parent[end], path_planned, idx);
 394:	\--|--\-X f9dff0ef          	jal	x1,330 <findShortestPath>
 398:	   \----- fd1ff06f          	jal	x0,368 <findShortestPath+0x38>

0000039c <_set_tls>:
 39c:	00050213          	addi	x4,x10,0
 3a0:	00008067          	jalr	x0,0(x1)

000003a4 <memcpy>:
 3a4:	       00050313          	addi	x6,x10,0
 3a8:	/----- 00060e63          	beq	x12,x0,3c4 <memcpy+0x20>
 3ac:	|  /-> 00058383          	lb	x7,0(x11)
 3b0:	|  |   00730023          	sb	x7,0(x6)
 3b4:	|  |   fff60613          	addi	x12,x12,-1
 3b8:	|  |   00130313          	addi	x6,x6,1
 3bc:	|  |   00158593          	addi	x11,x11,1
 3c0:	|  \-- fe0616e3          	bne	x12,x0,3ac <memcpy+0x8>
 3c4:	\----> 00008067          	jalr	x0,0(x1)

000003c8 <memset>:
 3c8:	       00050313          	addi	x6,x10,0
 3cc:	/----- 00060a63          	beq	x12,x0,3e0 <memset+0x18>
 3d0:	|  /-> 00b30023          	sb	x11,0(x6)
 3d4:	|  |   fff60613          	addi	x12,x12,-1
 3d8:	|  |   00130313          	addi	x6,x6,1
 3dc:	|  \-- fe061ae3          	bne	x12,x0,3d0 <memset+0x8>
 3e0:	\----> 00008067          	jalr	x0,0(x1)

000003e4 <__text_end>:
 3e4:	0000                	c.unimp
	...
