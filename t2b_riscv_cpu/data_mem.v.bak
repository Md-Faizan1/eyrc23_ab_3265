
module data_mem #(parameter DATA_WIDTH = 32, ADDR_WIDTH = 32, MEM_SIZE = 64) (
    input       clk, wr_en,
    input       [ADDR_WIDTH-1:0] wr_addr,
    input       [DATA_WIDTH-1:0] wr_data,
    output   [DATA_WIDTH-1:0] rd_data_mem
);

// array of 64 32-bit words or data
reg [DATA_WIDTH-1:0] data_ram [0:MEM_SIZE-1];

// word-aligned memory access
assign rd_data_mem = (wr_addr[ADDR_WIDTH-1:2] < MEM_SIZE) ? data_ram[wr_addr[ADDR_WIDTH-1:2]] : 0;

// synchronous write logic with byte mask
always @(posedge clk) begin
    if (wr_en && (wr_addr[ADDR_WIDTH-1:2] < MEM_SIZE)) begin
        // Calculate byte mask based on byte offset
        reg [DATA_WIDTH-1:0] byte_mask;
        case (wr_addr[1:0])
            2'b00: byte_mask = 32'b00000000_11111111_11111111_11111111;
            2'b01: byte_mask = 32'b11111111_00000000_11111111_11111111;
            2'b10: byte_mask = 32'b11111111_11111111_00000000_11111111;
            2'b11: byte_mask = 32'b11111111_11111111_11111111_00000000;
            default: byte_mask = 32'b11111111_11111111_11111111_11111111;
        endcase

        // Apply byte mask to write data
        data_ram[wr_addr[ADDR_WIDTH-1:2]] <= (data_ram[wr_addr[ADDR_WIDTH-1:2]] & ~byte_mask) | (wr_data & byte_mask);
    end
end

endmodule

